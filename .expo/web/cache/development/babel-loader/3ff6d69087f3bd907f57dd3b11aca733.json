{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/erwachen/Desktop/VCrpto/src/screens/CoinExchangeScreen/index.tsx\";\n\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useRoute } from '@react-navigation/native';\n\nvar image = require(\"../../../assets/images/Saly-31.png\");\n\nimport styles from \"./styles\";\n\nvar CoinExchangeScreen = function CoinExchangeScreen() {\n  var _route$params, _route$params2;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      coinAmount = _useState2[0],\n      setCoinAmount = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      coinUSDValue = _useState4[0],\n      setCoinUSDValue = _useState4[1];\n\n  var maxUSD = 100000;\n  var route = useRoute();\n  var isBuy = route == null ? void 0 : (_route$params = route.params) == null ? void 0 : _route$params.isBuy;\n  var coinData = route == null ? void 0 : (_route$params2 = route.params) == null ? void 0 : _route$params2.coinData;\n  useEffect(function () {\n    var amount = parseFloat(coinAmount);\n\n    if (!amount && amount !== 0) {\n      setCoinAmount(\"\");\n      setCoinUSDValue(\"\");\n      return;\n    }\n\n    setCoinUSDValue((amount * (coinData == null ? void 0 : coinData.currentPrice)).toString());\n  }, [coinAmount]);\n  useEffect(function () {\n    var amount = parseFloat(coinUSDValue);\n\n    if (!amount && amount !== 0) {\n      setCoinAmount(\"\");\n      setCoinUSDValue(\"\");\n      return;\n    }\n\n    setCoinAmount((amount / (coinData == null ? void 0 : coinData.currentPrice)).toString());\n  }, [coinUSDValue]);\n\n  var onPressOrder = function onPressOrder() {\n    if (isBuy && parseFloat(coinUSDValue) > maxUSD) {\n      Alert.alert('ERROR', \"beyond maximum \" + maxUSD + \" \");\n    }\n\n    if (!isBuy && parseFloat(coinAmount) > coinData.amount) {\n      Alert.alert('ERROR', \"Not enough \" + coinData.symbol + \" coins. You have only \" + coinData.amount);\n    }\n  };\n\n  return React.createElement(KeyboardAvoidingView, {\n    style: styles.container,\n    behavior: Platform.OS === 'ios' ? \"padding\" : \"height\",\n    keyboardVerticalOffset: 100,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, isBuy ? 'Buy ' : 'Sell ', coinData == null ? void 0 : coinData.name), React.createElement(Text, {\n    style: styles.subtitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, \"1 \", coinData == null ? void 0 : coinData.symbol, ' = ', \"$\", coinData == null ? void 0 : coinData.currentPrice), React.createElement(Image, {\n    style: styles.image,\n    source: image,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.inputsContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.inputContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    keyboardType: \"decimal-pad\",\n    placeholder: \"0\",\n    value: coinAmount,\n    onChangeText: setCoinAmount,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, coinData == null ? void 0 : coinData.symbol)), React.createElement(Text, {\n    style: {\n      fontSize: 25\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, \"=\"), React.createElement(View, {\n    style: styles.inputContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    keyboardType: \"decimal-pad\",\n    placeholder: \"0\",\n    value: coinUSDValue,\n    onChangeText: setCoinUSDValue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, \"USD\"))), React.createElement(Pressable, {\n    style: styles.button,\n    onPress: onPressOrder,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, \"Place Order\")));\n};\n\nexport default CoinExchangeScreen;","map":{"version":3,"sources":["/Users/erwachen/Desktop/VCrpto/src/screens/CoinExchangeScreen/index.tsx"],"names":["React","useEffect","useState","useRoute","image","require","styles","CoinExchangeScreen","coinAmount","setCoinAmount","coinUSDValue","setCoinUSDValue","maxUSD","route","isBuy","params","coinData","amount","parseFloat","currentPrice","toString","onPressOrder","Alert","alert","symbol","container","Platform","OS","title","name","subtitle","inputsContainer","inputContainer","fontSize","button","buttonText"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;;;;AAYA,SAASC,QAAT,QAAyB,0BAAzB;;AAEA,IAAMC,KAAK,GAAGC,OAAO,sCAArB;;AACA,OAAOC,MAAP;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAAA;;AAAA,kBACKL,QAAQ,CAAC,EAAD,CADb;AAAA;AAAA,MACxBM,UADwB;AAAA,MACZC,aADY;;AAAA,mBAESP,QAAQ,CAAC,EAAD,CAFjB;AAAA;AAAA,MAExBQ,YAFwB;AAAA,MAEVC,eAFU;;AAI/B,MAAMC,MAAM,GAAI,MAAhB;AAEA,MAAMC,KAAK,GAAGV,QAAQ,EAAtB;AAEA,MAAMW,KAAK,GAAGD,KAAH,qCAAGA,KAAK,CAAEE,MAAV,qBAAG,cAAeD,KAA7B;AACA,MAAME,QAAQ,GAAGH,KAAH,sCAAGA,KAAK,CAAEE,MAAV,qBAAG,eAAeC,QAAhC;AAEAf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMgB,MAAM,GAAGC,UAAU,CAACV,UAAD,CAAzB;;AAMA,QAAI,CAACS,MAAD,IAAWA,MAAM,KAAK,CAA1B,EAA4B;AAC1BR,MAAAA,aAAa,CAAC,EAAD,CAAb;AACAE,MAAAA,eAAe,CAAC,EAAD,CAAf;AACA;AACD;;AACDA,IAAAA,eAAe,CAAC,CAACM,MAAM,IAAGD,QAAH,oBAAGA,QAAQ,CAAEG,YAAb,CAAP,EAAkCC,QAAlC,EAAD,CAAf;AACD,GAbQ,EAaN,CAACZ,UAAD,CAbM,CAAT;AAeAP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMgB,MAAM,GAAGC,UAAU,CAACR,YAAD,CAAzB;;AACA,QAAI,CAACO,MAAD,IAAWA,MAAM,KAAK,CAA1B,EAA4B;AAC1BR,MAAAA,aAAa,CAAC,EAAD,CAAb;AACAE,MAAAA,eAAe,CAAC,EAAD,CAAf;AACA;AACD;;AACDF,IAAAA,aAAa,CAAC,CAACQ,MAAM,IAAGD,QAAH,oBAAGA,QAAQ,CAAEG,YAAb,CAAP,EAAkCC,QAAlC,EAAD,CAAb;AACD,GARQ,EAQN,CAACV,YAAD,CARM,CAAT;;AAUA,MAAMW,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,QAAGP,KAAK,IAAII,UAAU,CAACR,YAAD,CAAV,GAA2BE,MAAvC,EAA+C;AAC7CU,MAAAA,KAAK,CAACC,KAAN,CAAY,OAAZ,sBAAuCX,MAAvC;AACD;;AAED,QAAG,CAACE,KAAD,IAAUI,UAAU,CAACV,UAAD,CAAV,GAAyBQ,QAAQ,CAACC,MAA/C,EAAuD;AACrDK,MAAAA,KAAK,CAACC,KAAN,CAAY,OAAZ,kBAAmCP,QAAQ,CAACQ,MAA5C,8BAA2ER,QAAQ,CAACC,MAApF;AACD;AACF,GARD;;AAUA,SACE,oBAAC,oBAAD;AACE,IAAA,KAAK,EAAEX,MAAM,CAACmB,SADhB;AAEE,IAAA,QAAQ,EAAEC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB,SAAxB,GAAoC,QAFhD;AAGE,IAAA,sBAAsB,EAAE,GAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAErB,MAAM,CAACsB,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,KAAK,GAAG,MAAH,GAAY,OADpB,EAEGE,QAFH,oBAEGA,QAAQ,CAAEa,IAFb,CALF,EASE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEvB,MAAM,CAACwB,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKd,QADL,oBACKA,QAAQ,CAAEQ,MADf,EAEI,KAFJ,OAGIR,QAHJ,oBAGIA,QAAQ,CAAEG,YAHd,CATF,EAcE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEb,MAAM,CAACF,KAArB;AAA4B,IAAA,MAAM,EAAEA,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,EAgBE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEE,MAAM,CAACyB,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEzB,MAAM,CAAC0B,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AACE,IAAA,YAAY,EAAC,aADf;AAEE,IAAA,WAAW,EAAC,GAFd;AAGE,IAAA,KAAK,EAAExB,UAHT;AAIE,IAAA,YAAY,EAAEC,aAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOO,QAAP,oBAAOA,QAAQ,CAAEQ,MAAjB,CAPF,CADF,EAUE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACS,MAAAA,QAAQ,EAAE;AAAX,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAVF,EAWE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE3B,MAAM,CAAC0B,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AACE,IAAA,YAAY,EAAC,aADf;AAEE,IAAA,WAAW,EAAC,GAFd;AAGE,IAAA,KAAK,EAAEtB,YAHT;AAIE,IAAA,YAAY,EAAEC,eAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAPF,CAXF,CAhBF,EAqCE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEL,MAAM,CAAC4B,MAAzB;AAAiC,IAAA,OAAO,EAAEb,YAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEf,MAAM,CAAC6B,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CArCF,CADF;AA2CD,CAzFD;;AA2FA,eAAe5B,kBAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  View, \n  Text,\n  Image,\n  Pressable,\n  TextInput,\n  Alert,\n  KeyboardAvoidingView,\n  Platform\n} from 'react-native';\nimport {AntDesign} from '@expo/vector-icons'\nimport { useRoute } from '@react-navigation/native';\n\nconst image = require('../../../assets/images/Saly-31.png')\nimport styles from './styles'\n\nconst CoinExchangeScreen = () => {\n  const [coinAmount, setCoinAmount] = useState('');\n  const [coinUSDValue, setCoinUSDValue] = useState('');\n\n  const maxUSD =  100000;\n  \n  const route = useRoute();\n\n  const isBuy = route?.params?.isBuy;\n  const coinData = route?.params?.coinData;\n\n  useEffect(() => {\n    const amount = parseFloat(coinAmount);\n    // if(amount > 100) {\n    //   setCoinAmount('100')\n    //   setCoinUSDValue((100 * coinData?.currentPrice).toString())\n    //   return;\n    // }\n    if (!amount && amount !== 0){\n      setCoinAmount(\"\")\n      setCoinUSDValue(\"\")\n      return;\n    }\n    setCoinUSDValue((amount * coinData?.currentPrice).toString())\n  }, [coinAmount]);\n\n  useEffect(() => {\n    const amount = parseFloat(coinUSDValue);\n    if (!amount && amount !== 0){\n      setCoinAmount(\"\")\n      setCoinUSDValue(\"\")\n      return;\n    }\n    setCoinAmount((amount / coinData?.currentPrice).toString())\n  }, [coinUSDValue]);\n\n  const onPressOrder = () => {\n    if(isBuy && parseFloat(coinUSDValue) > maxUSD) {\n      Alert.alert('ERROR', `beyond maximum ${maxUSD} `)\n    }\n\n    if(!isBuy && parseFloat(coinAmount) > coinData.amount) {\n      Alert.alert('ERROR', `Not enough ${coinData.symbol} coins. You have only ${coinData.amount}`)\n    }\n  }\n\n  return (\n    <KeyboardAvoidingView\n      style={styles.container}\n      behavior={Platform.OS === 'ios' ? \"padding\" : \"height\"}\n      keyboardVerticalOffset={100}\n    >\n      <Text style={styles.title}>\n        {isBuy ? 'Buy ' : 'Sell '}\n        {coinData?.name}\n      </Text>\n      <Text style={styles.subtitle}>\n        1 {coinData?.symbol}\n        { ' = ' }\n        ${coinData?.currentPrice}\n      </Text>\n      <Image style={styles.image} source={image}/>\n\n      <View style={styles.inputsContainer}>\n        <View style={styles.inputContainer}>\n          <TextInput\n            keyboardType=\"decimal-pad\"\n            placeholder=\"0\"\n            value={coinAmount}\n            onChangeText={setCoinAmount}\n          />\n          <Text>{coinData?.symbol}</Text>\n        </View>\n        <Text style={{fontSize: 25}}>=</Text>\n        <View style={styles.inputContainer}>\n          <TextInput\n            keyboardType=\"decimal-pad\"\n            placeholder=\"0\"\n            value={coinUSDValue}\n            onChangeText={setCoinUSDValue}\n          /> \n          <Text>USD</Text>\n        </View>\n      </View>\n      <Pressable style={styles.button} onPress={onPressOrder}>\n        <Text style={styles.buttonText}>Place Order</Text>\n      </Pressable>  \n    </KeyboardAvoidingView>\n  )\n}\n\nexport default CoinExchangeScreen;"]},"metadata":{},"sourceType":"module"}